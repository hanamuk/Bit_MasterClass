오라클 완전 삭제 방법
1. uinstall(설치화면) <설치된제품> 선택 후 <제거>
2. 레지스트리 에서 삭제(regedit)
		-hkey-locall-machine
			-software\oracle:삭제
			-system\controlset~ 중 1개 \service\~ : 삭제
	=> 재부팅
3. 물리적으로 관련폴더 삭제 
	-OS:\program files\orecle
	-설치드라이브:\app

이걸 다해야 완전 삭제

--------------------------------------------------------------------------

세션 : 로그인해서부터 로그아웃순간까지 
- 기본 셀렉트 했을떄 나오는 행의 순서는 주소의 순서이다.(그 주소를 확인하는 코드는  select rowid, empno, ename from emp; 처럼 사용)
- 실무에서 select * 라고 안쓴다 너무 많아서 그리고 개행이 되기떄문에 desc 테이블이름 을 사용하자
- 오라클 서버에 접근하기 위한 클라이언트 프로그램을 사용하기위해서는  oracle.exe
파일을 사용해야한다. sql plus같은건 클라이언트 프로그램?
- 오라클은 행단위로 데이터를 저장해서 같은 테이블의 행이라도 다른디스크에 저장될 수 도 있다.(튜닝을 할때 나눠서 저장하도록, 굉장히 많이 데이터를 저장할때는 이렇게한다 (용어는 파티셔닝 테이블))
- 오라클은 자동으로 설치시 환경변수path를 설정해준다
- 데이터 타입은 하드디스크에 저장된다.
- 인덱스를 사용하지 않는 것을 full table scan이라고 한다

* 데이터 타입 
=숫자(NUMBER(X): 정수형, NUMBER(X,Y):실수
(X:는 전체자리수, Y는 소수이하 자리수.) X를 4주면 9999까지! 

=문자는 CHAR(X) / VARCHAR2(X) ,X를 안주면 1 , 최대 1024
-CHAR는 고정형 이고 VARCAHR는 고정형이다.
- VARCAHR는 10 을주고 3을쓰면 7을 반환한다. 근데 얘는 변하는 것이 많은 값에는 별로 좋지않다(동적데이터에 별로다)
  즉 3을쓰고나서 2를 추가하려고 하면 2를 다른곳에 저장하고 주소를 저장한다.
  (이러면 엑세스 시간이 늘어남)(이것을 row chaine 가 났다고 한다. => 이걸빠르게하는것(튜닝)을 row migration 이라고한다) 

=날짜는 DATE(8byte): '(yy)rr/mm/dd' ex)'21/06/11' 으로만 사용해야한다 21.06.11 이런식으로하면 디비는 문자로 인식한다.
- 비교연산이 된다 날짜형으로 쓰면.
- yy 는 무조건 현세기 (21세기)를 사용하고  rr은 49를 입력하면 현세기를 사용하고, 50~99는 이전세기(19세기)로 나타난다(2자리로 입력할떄 이렇게 됨.)

=멀티미디어 정보는  RAW / CLOB & BLOB 를 쓴다 CLOB (는 캐릭터), BLOB 는(바이트) 저장.

* 연산자(실행시 from 을먼저보고 그다음 where)
- select 컴럼명,... from 컬럼을가진 테이블,...  //제한된 컬럼** 만 추출 > 그래서 where를 사용.
- where 컬럼명 조건	//제한된  행**을 추출 : 조건절에 참인 행만 추출 대상
 조건에 사용되는 연산자
  	- 산술 연산자 : +, - , *, / , mod(10,3)//나머지 연산자
	- 관계 연산자: =, !=(<>), <=, >=, <,>,
	- 문자열 연산자 : 
	-------------	
	- 논리 연산자 : not, and, or  (or보다 and가 우선순위가 높다)

* 정렬작업
- 가급적 정렬작업 회피...
- select 명령으로 가능한 마지막 명령
- order by [컬럼명| 별칭 | 순서번호] [(asc)|desc],...  //컬럼명| 별칭 | 순서번호 으로 골라서 넣을수 있음 
  (오더바이에서 숫자보다 널값이 크다, 한글이 영어보다 크다고 인식된다.)

- 보통 테이블의 행의 이름은 자세하게 준다 그리고 이름을 연결된걸을 사용할때는_를 이용해 연결한다
- 근데 이러면 찾아낼때 너무 길어져서 별칭을 줄 수 가있다(select 컬럼명 (as) "컬럼 별칭"   //as 는 생략가능.)  컬럼별칭주는것은 실무에 중요!
- 질의문은 from 을 먼저 찾아내서 그 갯수만큼 select 해주는데 만약 select에 걸러내는 것을 안하면 그 테이블의 행 갯수만큼 이상한 값이 다 나온다.

- 인덱스가 있는데 무언가를 검색할떄 인덱스를 찾지않고 풀테이블 스캔하는 명령어는 (쓰면 성능이 느려짐..)
1. 부정연산자

- 오라클은 데이터의 대소문자를 구분.
- 대소문자 구분없이 명령어를 찾기위해서는(lower나 upper를 가지고 대문자나 소문자로 전부다 바꿔어서 사용한다)
- 널값은 안좋다.
--------------------------------------------------------------------------------
*SQL* PLUS 명령(Tool명령) 

- 한줄로 코딩 해야한다(세미콜론 사용 안함.)
- 사용한 명령이 버퍼에 기억되지 않음.(마지막 사용명령만 기억)
- .sql파일에서 --는 한줄 주석이다!

cmd 터미널환경에서 오라클 접속해서 사용하기.
sqlplus /nolog  : 실행환경 실행./ 프로그램만 실행
conn system/password : 로그인하는 명령 , system는 아이디 인듯? password 는 비밀번호 설정한것./ 근데 진짜 관리자 로그인이 아니다
conn sys/password as sysdba : 시스템관리자로 로그인
conn / as sysdba : 는 아이디 패스워드를 입력안하는 관리자 로그인, 운영체제에서 관리에서 관리자면 디폴트로 들어가지도록 만들어진다
- 이게 실무에서는 이렇게 들어가게 만들면 보안에 안좋아서 명령을 통해 비밀번호 아이디 를 치도록 하게한다..

show user : 현재 유저 보여준다.
**scott이 디폴트로 잠겨있고 패스워드도 만료시켜져 있다, 그래서 연습계정을 할라면 그것을 먼저 풀어야한다
desc emp  : emp 테이블을 보여줘라
host : 현재 세션을 유지한상태로 나간다/ 다시 세션으로 돌아가고 싶으면 exit를 치면된다.
spool : 현재 치고는 명령어가 저장된다 ex) spool 2 라고 쓰면 2에 저장된다.  파일명령어

show all : 현재 sql plus의 환경설정을 보여준다. , 로그아웃되면 초기화.
- 이걸 보면서 환경 변경하고 싶으면 set linesize 120 이런식으로 바꿀수있다


*SQL*명령(DBMS 명령)

-  l 누르면 이전명령어가 나온다
- i를 누르면 다음 행으로 간다
- del을 하고 행번호를 입력하면 해당 행이 사라진다.
- 행번호를 앞에 치고 뒤에 명령어를 치면 해당 행 자리에 명령어가 덮어씌워진다.

- sql 쿼리문 파일을 만들고싶다면
 ed 를 치고 숫자라면 붙혀서 ed1 이런식으로 문자면 한칸 띄운다 ed c 이렇게 만들고 나서
 @1 이런식으로 사용하면 만든 파일안의 쿼리 문으로 실행된다. 이파일안에 쿼리문 2개를 넣으면 둘다 실행된다.
 경로를 어개 아느냐 ? 첨에 접속한 dir의 경로에 만들어진다

** scott/tiger 는 아이디와 비밀번호 
alter user scott account unlock identified by tiger; //아이디 비밀번호를 바꿔주는 SQL명령어다. SQL명령어라서 뒤에 세미콜론.
						// 연습계정 잠김해제 및 암호변경
select *from tab; //현재소유한 테이블 다보여줘
select sysdate from dual 	//sysdate 는 날짜., dual 는 아무데서나 가져와라.
select to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') from dual;  //2021-06-11 11:45:16 이 출력된다, to_char는 문자로 바꾸는 함수.

job in('salesman' , 'clerk'); 	//job  안에 'salesman' 이나 'clerk'  가 있느냐? 라는 명령어 , or을 쓰면되지만 ,만약 서브쿼리
처럼 안에서 몇개의 갯수가 나올지 모를떄는 in()명령어를 쓴다. 즉 명확할때만 or,and를 사용하자.

널값을 찾을때는 is null을 사용, 널은 비교연산이 안된다.

insert into emp(empno, ename, hiredate) values(101,'홍동우', sysdate); //시간및 이름, 번호넣는 명령어
commit; //하드디스크에서 안지워지게 저장하기


-- 입사일이 '21/01/01' ~ '21/06/11' 인 사람을 추출(A~B날짜   제한)
: 
select ename from emp where hiredate>='87/01/01' AND hiredate < '21/06/12';
날짜 연산할떄는 하루 최대값에 1 을더하고 미만으로 설정한다.

-- 입사일이 '21/06/11' 자정 ~ 오후 6시 까지인 사람을 추출(시간 제한)
'21/06/11 18:00:00' 
:  select ename "이름" ,empno "회번", hiredate"입사일" from emp where hiredate>='21/06/11' and hiredate <=to_date('21/06/11 18:00:00','yy/mm/dd hh24:mi:ss');
   to_date를 이용하여 date에 맞게 변환시켜준다.

-- [xxx]의 급여는 [xxx] 이다.
 select ename ||'의 급여는 '|| sal ||'입니다' 소개  from emp; 
: || 연결 연산자를 사용해서 문자를 묶고 뒤쪽에 별칭을 정해주면 소개라는 컬럼이 생기고 그 아래 값으로 만든 값이 들어간다.


 select ename, sal, nvl(comm,0) comm from emp; // nvl(컬럼, 대체 값) 은 null 대체 함수이다, 즉 컬럼이 null이라면 0으로 해라는 명령어임 이거는

-- 사원명 ,급여, 커미션, 총급여(급여 +커미션)을 추출.
select ename, sal, nvl(comm,0) comm ,nvl(comm,0)+sal sumsal from emp;

-- 이름이 A로 시작하는 사람을 추출
select ename from emp
where ename like 'A%';		// 'A%'는 이름이 딱 'A' 인사람 이라는 뜻이고 문제처럼 사용하려면 like 'A%'; 로써야한다.

-- 이름에 두번째 문자가 L인사람을 추출.
select ename from emp where ename like '_L%';

-- 이름에 'L' 이 두번이상 포함되는 사람을 추출
select ename from emp where ename like '%L%L%';

-- 와일드 카드가 아니고 특수문자로 인식하고싶다면.
select ename from emp where ename like 'A$_%' escape '$' 라고주면 $뒤에 문자는 특수문자로 인식한다. ;

--부서별로 정렬하되, 같은 부서는 급요가 높은 순서대로 정렬하여 추출(단, 급여가 null인 사람은 제외시킨다. )

*중복제거 함수
- 업무의 종류를 추출
select distinct jab from emp;

create user chw identified by pass default tablespace users; //user를 만들고 pass는 암호, 
default tablesapce system 이 디폴트로 들어간다.// 저장위치

grant connect,resource to chw; //권한부여
* 디비에서 단어로 나오는 것은 실제 권한이 아니고 관련권한을 묶어놓은 집합 개념이다 (role롤)
* 원래는 grant create table, create session to chw; 이렇게 하나하나 줘야하는데 connect,resource는 권한을 묶어놓은 롤 2개이다. (일반적인 권한모음)





